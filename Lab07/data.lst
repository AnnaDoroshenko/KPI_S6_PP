GNAT GPL 2017 (20170515-63)
Copyright 1992-2017, Free Software Foundation, Inc.

Compiling: data.adb
Source file time stamp: 2018-05-03 21:05:50
Compiled at: 2018-05-05 12:01:01

     1. with Text_IO, Ada.Integer_Text_IO;
     2. use Text_IO, Ada.Integer_Text_IO;
     3.
     4. -- Package Data, body --
     5. package body Data is
     6.
     7.    procedure VectorFillWithOnes (A : out Vector) is
     8.    begin
     9.       for i in 1..N loop
    10.          A(i) := 1;
    11.       end loop; 
    12.    end VectorFillWithOnes;
    13.    
    14.    procedure MatrixFillWithOnes (MA : out Matrix) is
    15.    begin
    16.       for i in 1..N loop
    17.          for j in 1..N loop
    18.             MA(i)(j) := 1;
    19.          end loop;
    20.       end loop;
    21.    end MatrixFillWithOnes;
    22.
    23.    -- Functions for the calculation --
    24.    
    25.    function SearchMinElemOfVector(A : in Vector) return Integer is
    26.       minElem : Integer := A(1);
    27.    begin
    28.       for i in 1..h loop
    29.          if A(i) < minElem then
    30.             minElem := A(i);
    31.          end if;
    32.       end loop;
    33.       return minElem;  
    34.    end SearchMinElemOfVector;
    35.
    36.    function SearchTotalMin (a, b : in Integer) return Integer is
    37.       min : Integer := a;
    38.    begin
    39.       if b < a then
    40.          min := b;
    41.       end if;
    42.       return min;
    43.    end SearchTotalMin;
    44.
    45.    function MultMatrices (MA, MB : in Matrix) return Matrix is
    46.       mRes : MatrixN;
    47.    begin
    48.       for i in 1..H loop
    49.          for j in 1..N loop
    50.             mRes(i)(j) := 0;
    51.             for k in 1..N loop
    52.                mRes(i)(j) := mRes(i)(j) + MA (i)(k) * MB (k)(j);
    53.             end loop;
    54.          end loop;
    55.       end loop;
    56.       return mRes;
    57.    end MultMatrices;
    58.
    59.    function MultScalarMatrix (scalar : in Integer; MA : Matrix) return Matrix is
    60.       resMatrix : MatrixN;
    61.    begin 
    62.       for i in 1..H loop
    63.          for j in 1..N loop
    64.             resMatrix(i)(j) := scalar * MA(i)(j);
    65.          end loop;
    66.       end loop;
    67.       return resMatrix;
    68.    end MultScalarMatrix;
    69.
    70.    procedure AddMatrices (MR : out Matrix; MA, MB : in Matrix) is
    71.    begin
    72.       for i in 1..H loop
    73.          for j in 1..N loop
    74.             MR(i)(j) := MA(i)(j) + MB(i)(j);
    75.          end loop;
    76.       end loop;
    77.    end AddMatrices;
    78.
    79.    procedure OutputMatrix (MA : in Matrix) is
    80.    begin
    81.       for i in 1..N loop
    82.          for j in 1..N loop
    83.               Put(MA(i)(j));
    84.          end loop;
    85.          New_Line;
    86.       end loop;
    87.    end OutputMatrix;
    88.    
    89. end Data;

Compiling: data.ads
Source file time stamp: 2018-05-03 21:05:50
Compiled at: 2018-05-05 12:01:01

     1. generic
     2.    N : Integer;
     3.    H : Integer;
     4.    
     5. package Data is
     6. 	type Vector is array(Integer range<>) of Integer;
     7.     subtype VectorH is Vector(1..H);
     8.     subtype Vector2H is Vector(1..2*H);
     9.     subtype Vector3H is Vector(1..3*H);
    10.     subtype VectorN is Vector(1..N);
    11.
    12.     type Matrix is array(Integer range<>) of VectorN;
    13.     subtype MatrixH is Matrix(1..H);
    14.     subtype Matrix2H is Matrix(1..2*H);
    15.     subtype Matrix3H is Matrix(1..3*H);
    16.     subtype MatrixN is Matrix(1..N);
    17.
    18. 	procedure VectorFillWithOnes (A : out Vector);
    19. 	procedure MatrixFillWithOnes (MA : out Matrix);
    20. 	function SearchMinElemOfVector(A : in Vector) return Integer;
    21. 	function SearchTotalMin (a, b : in Integer) return Integer;
    22. 	function MultMatrices (MA, MB : in Matrix) return Matrix;
    23. 	function MultScalarMatrix (scalar : in Integer; MA : Matrix) return Matrix;
    24. 	procedure AddMatrices (MR : out Matrix; MA, MB : in Matrix);
    25. 	procedure OutputMatrix (MA : in Matrix);
    26.
    27. end Data;

 89 lines: No errors